"""
A script to visualise the output generated by LikelihoodLandscape.

Author: Philipp Windischhofer
Date:   January 2020
Email:  philipp.windischhofer@cern.ch

Description:
    This script creates comparison plots for any number of LikelihoodLandscape runs.
"""


import ROOT
ROOT.gROOT.SetBatch(True)

from argparse import ArgumentParser

from plotLikelihoodLandscape import Plot1DProfile, Plot2DContours, Tree2Dict, RemoveOutliers, Interpolate, operator_namer
from analysisPlottingConfig import Config
import numpy as np

def compareLikelihoodLandscapes(infile_paths, legend, outfile_path, twodelta, year, is_exp, inner_label = None):

    # the library of colors to be used for comparisons
    color_library = [ROOT.kAzure - 5, ROOT.kOrange - 3, ROOT.kBlue, ROOT.kGreen + 2]

    if len(infile_paths) > 4:
        raise NotImplementedError("Do you really want to compare so many runs in one plot? You can, but make sure you select meaningful colors!")

    # load the data from each given input file
    data = []
    bestfit = []
    domain_dims = []
    for cur_infile_path in infile_paths:
        cur_data = Tree2Dict(cur_infile_path, "NLLscan")
        cur_bestfit = Tree2Dict(cur_infile_path, "bestFit")
        cur_domain_dims = len([col for col in cur_data.keys() if "NLL" not in col])

        data.append(cur_data)
        bestfit.append(cur_bestfit)
        domain_dims.append(cur_domain_dims)

    if len(set(domain_dims)) != 1:
        raise Exception("Error: you are requesting to make comparison plots of runs with different dimensionalities!")

    domain_dims = domain_dims[0]

    # prepare the inner label text
    plotconf = Config(options = [])
    plotconf._year = year

    if inner_label is None:
        runinfo = plotconf.get_run_info()
        lumi, energy = list(runinfo.values())[0]
        signaldesc = plotconf.signal[0]
        lambdaval = plotconf.EFT_lambda
        inner_label = f"#splitline{{#sqrt{{s}} = {energy} TeV, {lumi} fb^{{-1}}}}{{{signaldesc}, #Lambda = {lambdaval} TeV}}"

    # extract some meta information from the data: which operators it concerns ...
    available_operators = list({col for cur_data in data for col in cur_data.keys() if "NLL" not in col})

    # ... and of what type the available NLL values are
    available_NLL = [col for col in cur_data.keys() if "NLL" in col for cur_data in data]
    if len(set(available_NLL)) != 1:
        raise Exception("Error: you are requesting to compare runs with different NLL types!")
    NLL_column = available_NLL[0]

    if domain_dims == 1:

        if len(available_operators) != 1:
            raise Exception("Error: you are requesting to compare runs with different POIs!")

        available_operator = available_operators[0]

        # fetch the data to make a 1D comparison plot
        xvals = []
        yvals = []
        colors = []
        xlabel = operator_namer(available_operator, plotconf)
        ylabel = "-#Delta log(L)"
        lw = []
        ls = []

        def renormalizeValues(vals, name):
            newVals = []
            mini = np.min(np.array(vals))
            if mini < -1e-3:
                print(f"WARNING: The fit minimum and the likelihood scan minimum don't coincide for {name}. Going to renormalize to the likelihood scan minimum. Please check this!")
                for val in vals:
                    val = val - mini
                    newVals.append(val)
                return newVals
            else:
                return vals

        for cur_color, cur_data, cur_leg in zip(color_library, data, legend):
            cur_data[NLL_column] = renormalizeValues(cur_data[NLL_column], cur_leg)
            yvals.append(cur_data[NLL_column])
            xvals.append(cur_data[available_operator])
            colors.append(cur_color)
            lw.append(3)
            ls.append(1)

        Plot1DProfile(xvals, yvals, legend, colors, outfile_path, twodelta, xlabel = xlabel, ylabel = ylabel, inner_label = inner_label, lw = lw, ls = ls)

    elif domain_dims == 2:

        # check if all runs actually concern the same two operators
        available_operators = list({col for cur_data in data for col in cur_data.keys() if "NLL" not in col})

        if len(available_operators) != 2:
            raise Exception("Error: you are requesting to compare runs with incompatible POIs!")

        x_column = available_operators[0]
        y_column = available_operators[1]
        print(f"Plotting along x: {x_column}")
        print(f"Plotting along y: {y_column}")

        # print the 1-sigma CL contours - make sure to append this information to the legend
        contour_levels = [1.15, 3.00]
        if is_exp:
            contour_labels = ["68% CL (exp.)", "95% CL (exp.)"]
        else:
            contour_labels = ["68% CL (obs.)", "95% CL (obs.)"]
        contour_ls = [7, 1]

        # now prepare the data to be plotted
        plot_data = []
        plot_bestfit = []
        colors = []
        lw = []
        ls = []
        xlabel = operator_namer(x_column, plotconf)
        ylabel = operator_namer(y_column, plotconf)

        def renormalize_2D(data, name):
            dl = list(data)
            minx = miny = 0.0
            minz = 1e6

            for cell in dl:
                for triple in cell:
                    if triple[2] < minz:
                        minz = triple[2]
                        minx = triple[0]
                        miny = triple[1]

            if minz < -1e-3:
                print(f"WARNING: Bestfit minimum and minimum from interpolated likelihood landscape don't coincide for {name}. Going to use the minimum from the likelihood scan. Please check this!")

                for cell in dl:
                    for triple in cell:
                        triple[2] = triple[2] - minz

                return np.array(dl), minx, miny, True
            else:
                return [],0.0,0.0,False


        for cur_color, cur_data, cur_bestfit, cur_leg in zip(color_library, data, bestfit, legend):
            (new_xvals, new_yvals), new_zvals = RemoveOutliers(xvals = [cur_data[x_column], cur_data[y_column]],
                                                               zvals = cur_data[NLL_column])
            interpolated_data = Interpolate(xvals = new_xvals, yvals = new_yvals, zvals = new_zvals)
            tmp_interpolated_data, tmp_minx, tmp_miny, wrongMin = renormalize_2D(interpolated_data, cur_leg)
            if(wrongMin):
                plot_data.append(tmp_interpolated_data)
                plot_bestfit.append([tmp_minx, tmp_miny])
            else:
                plot_data.append(interpolated_data)
                plot_bestfit.append([cur_bestfit[x_column][0], cur_bestfit[y_column][0]])

            colors.append(cur_color)
            lw.append(3)

        # then, print the contour lines coming from this surface
        Plot2DContours(plot_data, legend, colors, outfile_path, contour_levels,
                       contour_labels = contour_labels, cont_ls = contour_ls, xlabel = xlabel,
                       ylabel = ylabel, lw = lw, bestfit = plot_bestfit, inner_label = inner_label)
    else:
        raise NotImplementedError(f"Error: can not create comparison plots with {domain_dims} x-dimensions (yet).")

if __name__ == "__main__":
    parser = ArgumentParser(description = "make comparison plots of different LikelihoodLandscape runs")
    parser.add_argument("--infiles", nargs = '+', dest = "infile_paths", help = "path to the individual 'LikelihoodLandscape_out.root' files")
    parser.add_argument("--legend", nargs = '*', dest = "legend", help = "legend to describe the individual runs")
    parser.add_argument("--outfile", action = "store", dest = "outfile_path", help = "path to the requested comparison plot")
    parser.add_argument("--year", action = "store", dest = "year", default = "6051", help = "data-taking periods used to make this plot, following WSMaker convention. Default: 6051, i.e. full Run 2")
    parser.add_argument("--twodelta", action = "store_true", dest = "twodelta", help = "Plot -2 Delta log(L) for 1D likelihood scans")
    parser.add_argument("--exp", action = "store_const", const = True, dest = "is_exp", default = False)
    args = vars(parser.parse_args())

    compareLikelihoodLandscapes(**args)

